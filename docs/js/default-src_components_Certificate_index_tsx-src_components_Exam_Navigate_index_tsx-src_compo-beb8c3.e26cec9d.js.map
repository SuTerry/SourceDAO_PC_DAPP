{"version":3,"file":"js/default-src_components_Certificate_index_tsx-src_components_Exam_Navigate_index_tsx-src_compo-beb8c3.e26cec9d.js","mappings":"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,UACdC,KAAM,eACNC,KAAM,WAER,CACEF,aAAc,UACdC,KAAM,KACNC,KAAM,WAER,CACEF,aAAc,QACdC,KAAM,SACNC,KAAM,SAER,CACEF,aAAc,QACdC,KAAM,QACNC,KAAM,SAER,CACEF,aAAc,UACdC,KAAM,QACNC,KAAM,WAER,CACEF,aAAc,UACdC,KAAM,YACNC,KAAM,WAER,CACEF,aAAc,UACdC,KAAM,UACNC,KAAM,WAER,CACEF,aAAc,SACdC,KAAM,WACNC,KAAM,UAER,CACEF,aAAc,SACdC,KAAM,QACNC,KAAM,UAER,CACEF,aAAc,SACdC,KAAM,UACNC,KAAM,UAER,CACEF,aAAc,UACdC,KAAM,QACNC,KAAM,WAER,CACEF,aAAc,SACdC,KAAM,SACNC,KAAM,UAER,CACEF,aAAc,SACdC,KAAM,aACNC,KAAM,WAGVF,aAAc,gCACdC,KAAM,GACNC,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEC,aAAc,SACdC,KAAM,UACNC,KAAM,WAGVD,KAAM,mBACNE,QAAS,CACP,CACEE,WAAY,CACV,CACEL,aAAc,UACdC,KAAM,KACNC,KAAM,WAER,CACEF,aAAc,QACdC,KAAM,SACNC,KAAM,SAER,CACEF,aAAc,QACdC,KAAM,QACNC,KAAM,SAER,CACEF,aAAc,SACdC,KAAM,QACNC,KAAM,UAER,CACEF,aAAc,UACdC,KAAM,OACNC,KAAM,WAER,CACEF,aAAc,UACdC,KAAM,QACNC,KAAM,WAER,CACEF,aAAc,SACdC,KAAM,SACNC,KAAM,WAGVF,aAAc,gCACdC,KAAM,GACNC,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEC,aAAc,UACdC,KAAM,OACNC,KAAM,YAGVD,KAAM,kBACNE,QAAS,CACP,CACEH,aAAc,YACdC,KAAM,GACNC,KAAM,cAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEC,aAAc,SACdC,KAAM,UACNC,KAAM,WAGVD,KAAM,sBACNE,QAAS,CACP,CACEE,WAAY,CACV,CACEL,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","sources":["webpack://sourcedao-pc-dapp/./src/api/contract.ts","webpack://sourcedao-pc-dapp/./src/api/exam/index.ts","webpack://sourcedao-pc-dapp/./src/api/config.ts","webpack://sourcedao-pc-dapp/./src/api/reward/index.ts","webpack://sourcedao-pc-dapp/./src/api/check/index.ts","webpack://sourcedao-pc-dapp/./src/api/workflow/index.tsx","webpack://sourcedao-pc-dapp/./src/components/Certificate/index.tsx","webpack://sourcedao-pc-dapp/./src/components/Exam/Navigate/index.tsx","webpack://sourcedao-pc-dapp/./src/components/Exam/Take/Radio/index.tsx","webpack://sourcedao-pc-dapp/./src/components/Exam/Take/index.tsx","webpack://sourcedao-pc-dapp/./src/components/Exam/Title/index.tsx","webpack://sourcedao-pc-dapp/./src/constants/exam.ts","webpack://sourcedao-pc-dapp/./src/utils/ipfs.ts"],"sourcesContent":["import { ethers } from 'ethers'\r\n\r\nimport store from '@store/index'\r\n\r\nimport { getProvider } from '@utils/wallets'\r\n\r\ninterface WriteContractResult {\r\n  wait: () => Promise<void>\r\n}\r\n\r\nexport default class Contracts {\r\n  protected address = ''\r\n  protected writeAbi: ethers.ContractInterface = []\r\n  protected readAbi: ethers.ContractInterface = []\r\n\r\n  private _writeContract: ethers.Contract | undefined\r\n  private _readContract: ethers.Contract | undefined\r\n\r\n  constructor() {\r\n    (async () => {\r\n      const { currentWallet } = store.getState().wallet\r\n\r\n      const provider = await getProvider(currentWallet)\r\n\r\n      if (provider) {\r\n        const signer = provider.getSigner()\r\n\r\n        this._writeContract = new ethers.Contract(\r\n          this.address,\r\n          this.writeAbi,\r\n          signer\r\n        )\r\n\r\n        this._readContract = new ethers.Contract(\r\n          this.address,\r\n          this.readAbi,\r\n          provider\r\n        )\r\n      }\r\n    })()\r\n  }\r\n\r\n  protected writeContract(\r\n    api: string,\r\n    ...arg: unknown[]\r\n  ): Promise<WriteContractResult> {\r\n    if (!this._writeContract) throw Error('wallet unconnet')\r\n    return this._writeContract[api](...arg)\r\n  }\r\n\r\n  protected readContract<T>(api: string, ...arg: unknown[]): T {\r\n    if (!this._readContract) throw Error('wallet unconnet')\r\n    return this._readContract[api](...arg)\r\n  }\r\n}\r\n","import Contracts from '@api/contract'\r\n\r\nimport { EXAM_ADDRESS } from '@api/config'\r\n\r\nexport interface ExamType {\r\n  typeId: number\r\n  name: string\r\n}\r\n\r\nexport interface ExamLevel {\r\n  levelId: number\r\n  name: string\r\n}\r\n\r\nexport interface ExaminationMeta {\r\n  _examId: string\r\n  _level: number\r\n  _type: number\r\n  _time: number\r\n  _questions: string[]\r\n}\r\n\r\nclass Exam extends Contracts {\r\n  address = EXAM_ADDRESS\r\n\r\n  writeAbi = [\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: 'string',\r\n          name: '_examId',\r\n          type: 'string',\r\n        },\r\n        {\r\n          internalType: 'uint8',\r\n          name: '_type',\r\n          type: 'uint8',\r\n        },\r\n        {\r\n          internalType: 'uint8',\r\n          name: '_level',\r\n          type: 'uint8',\r\n        },\r\n      ],\r\n      name: 'genExam',\r\n      outputs: [],\r\n      stateMutability: 'nonpayable',\r\n      type: 'function',\r\n    },\r\n  ]\r\n\r\n  readAbi = [\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: 'string',\r\n          name: '_examId',\r\n          type: 'string',\r\n        },\r\n      ],\r\n      name: 'getExam',\r\n      outputs: [\r\n        {\r\n          internalType: 'string[]',\r\n          name: '',\r\n          type: 'string[]',\r\n        },\r\n      ],\r\n      stateMutability: 'view',\r\n      type: 'function',\r\n    },\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: 'uint8',\r\n          name: 'qtype',\r\n          type: 'uint8',\r\n        },\r\n        {\r\n          internalType: 'uint8',\r\n          name: 'qlevel',\r\n          type: 'uint8',\r\n        },\r\n      ],\r\n      name: 'getExaminationDuration',\r\n      outputs: [\r\n        {\r\n          internalType: 'uint16',\r\n          name: '',\r\n          type: 'uint16',\r\n        },\r\n      ],\r\n      stateMutability: 'view',\r\n      type: 'function',\r\n    },\r\n    {\r\n      inputs: [],\r\n      name: 'listTypes',\r\n      outputs: [\r\n        {\r\n          components: [\r\n            {\r\n              internalType: 'uint8',\r\n              name: 'typeId',\r\n              type: 'uint8',\r\n            },\r\n            {\r\n              internalType: 'string',\r\n              name: 'name',\r\n              type: 'string',\r\n            },\r\n          ],\r\n          internalType: 'struct IExamination.ExamType[]',\r\n          name: '',\r\n          type: 'tuple[]',\r\n        },\r\n      ],\r\n      stateMutability: 'view',\r\n      type: 'function',\r\n    },\r\n    {\r\n      inputs: [],\r\n      name: 'listLevels',\r\n      outputs: [\r\n        {\r\n          components: [\r\n            {\r\n              internalType: 'uint8',\r\n              name: 'levelId',\r\n              type: 'uint8',\r\n            },\r\n            {\r\n              internalType: 'string',\r\n              name: 'name',\r\n              type: 'string',\r\n            },\r\n          ],\r\n          internalType: 'struct IExamination.ExamLevel[]',\r\n          name: '',\r\n          type: 'tuple[]',\r\n        },\r\n      ],\r\n      stateMutability: 'view',\r\n      type: 'function',\r\n    },\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: 'address',\r\n          name: '_user',\r\n          type: 'address',\r\n        },\r\n      ],\r\n      name: 'getExamsByUser',\r\n      outputs: [\r\n        {\r\n          internalType: 'string[]',\r\n          name: '',\r\n          type: 'string[]',\r\n        },\r\n      ],\r\n      stateMutability: 'view',\r\n      type: 'function',\r\n    },\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: 'string',\r\n          name: '_examId',\r\n          type: 'string',\r\n        },\r\n      ],\r\n      name: 'getExaminationMeta',\r\n      outputs: [\r\n        {\r\n          components: [\r\n            {\r\n              internalType: 'uint256',\r\n              name: '_time',\r\n              type: 'uint256',\r\n            },\r\n            {\r\n              internalType: 'uint8',\r\n              name: '_type',\r\n              type: 'uint8',\r\n            },\r\n            {\r\n              internalType: 'uint8',\r\n              name: '_level',\r\n              type: 'uint8',\r\n            },\r\n            {\r\n              internalType: 'string',\r\n              name: '_examId',\r\n              type: 'string',\r\n            },\r\n            {\r\n              internalType: 'string[]',\r\n              name: '_questions',\r\n              type: 'string[]',\r\n            },\r\n          ],\r\n          internalType: 'struct IExamination.UserExamination',\r\n          name: '',\r\n          type: 'tuple',\r\n        },\r\n      ],\r\n      stateMutability: 'view',\r\n      type: 'function',\r\n    },\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: 'uint8',\r\n          name: '_type',\r\n          type: 'uint8',\r\n        },\r\n      ],\r\n      name: 'getTypeName',\r\n      outputs: [\r\n        {\r\n          internalType: 'string',\r\n          name: '',\r\n          type: 'string',\r\n        },\r\n      ],\r\n      stateMutability: 'view',\r\n      type: 'function',\r\n    },\r\n  ]\r\n\r\n  async genExam(examId: string, type: number, level: number) {\r\n    return this.writeContract('genExam', examId, type, level)\r\n  }\r\n\r\n  async getExam(examId: string) {\r\n    return this.readContract<string[]>('getExam', examId)\r\n  }\r\n\r\n  async listTypes() {\r\n    return this.readContract<ExamType[]>('listTypes')\r\n  }\r\n\r\n  async listLevels() {\r\n    return this.readContract<ExamLevel[]>('listLevels')\r\n  }\r\n\r\n  async getExaminationDuration(type: number, level: number) {\r\n    return this.readContract<number>('getExaminationDuration', type, level)\r\n  }\r\n\r\n  async getExamsByUser(address: string) {\r\n    return this.readContract<string[]>('getExamsByUser', address)\r\n  }\r\n\r\n  async getExaminationMeta(examId: string) {\r\n    return this.readContract<ExaminationMeta>('getExaminationMeta', examId)\r\n  }\r\n\r\n  async getTypeName(type: number) {\r\n    return this.readContract<string>('getTypeName', type)\r\n  }\r\n}\r\n\r\nlet instance\r\n\r\nexport default (() => {\r\n  if (instance) return instance\r\n  instance = new Exam()\r\n  return instance\r\n})()\r\n","const env = process.env.WEB_ENV\r\n\r\n// exam\r\nexport const EXAM_ADDRESS = (env === 'pro') ? ''\r\n  : (env === 'pre' ? ''\r\n    : (env === 'sit' ? '0xa5402b2dF555029cc039d7DB917325118FdD791c'\r\n      : (env === 'dev' ? '0xa5402b2dF555029cc039d7DB917325118FdD791c'\r\n        : '0xa5402b2dF555029cc039d7DB917325118FdD791c')))\r\n\r\n// reward\r\nexport const REWARD_ADDRESS = (env === 'pro') ? ''\r\n  : (env === 'pre' ? ''\r\n    : (env === 'sit' ? '0xF1cCf9f4824929EA8a2B18ED571B6759e6da3fDf'\r\n      : (env === 'dev' ? '0xF1cCf9f4824929EA8a2B18ED571B6759e6da3fDf'\r\n        : '0xF1cCf9f4824929EA8a2B18ED571B6759e6da3fDf')))\r\n\r\n// check\r\nexport const CHECK_ADDRESS = (env === 'pro') ? ''\r\n  : (env === 'pre' ? ''\r\n    : (env === 'sit' ? '0xC4Bd238B4d502f8BA801decb95D00b08c74e5937'\r\n      : (env === 'dev' ? '0xC4Bd238B4d502f8BA801decb95D00b08c74e5937'\r\n        : '0xC4Bd238B4d502f8BA801decb95D00b08c74e5937')))\r\n\r\n// Workflow\r\nexport const WORKFLOW_ADDRESS = (env === 'pro') ? ''\r\n  : (env === 'pre' ? ''\r\n    : (env === 'sit' ? '0x0051Cd4974604C1721D5521019C242FE27aD453B'\r\n      : (env === 'dev' ? '0x0051Cd4974604C1721D5521019C242FE27aD453B'\r\n        : '0x0051Cd4974604C1721D5521019C242FE27aD453B')))","import Contracts from '@api/contract'\r\n\r\nimport { REWARD_ADDRESS } from '@api/config'\r\n\r\nimport { CSTLEVEL } from '@constants/exam'\r\n\r\nexport interface SourceDaoReward {\r\n  // 基础信息\r\n  org: string // 颁发机构\r\n  time: number // 颁发时间，使用区块时间\r\n  // 区块链信息\r\n  chain: string // 区块链\r\n  protocol: string // 协议\r\n  contractAddr: string // 合约地址\r\n  id: number // SBT id\r\n  qlevel: keyof typeof CSTLEVEL // 考试的难度\r\n  qtype: number // 考试的类型\r\n  qsize: number // 试题数量\r\n  qduration: number // 考试时长，分钟\r\n  lowCost: number // 考试门槛，10E-6\r\n  costUnit: string // 考试费用单位\r\n  address: string // 考试人\r\n  picContent: string // 图片内容，例如IPFS hash\r\n  score: number // 考试分数\r\n  examId: string // 试卷ID\r\n}\r\n\r\nclass Reward extends Contracts {\r\n  address = REWARD_ADDRESS\r\n\r\n  writeAbi = [\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: 'string',\r\n          name: '_examId',\r\n          type: 'string',\r\n        },\r\n        {\r\n          internalType: 'uint8[]',\r\n          name: '_answers',\r\n          type: 'uint8[]',\r\n        },\r\n        {\r\n          internalType: 'uint8',\r\n          name: '_type',\r\n          type: 'uint8',\r\n        },\r\n        {\r\n          internalType: 'uint8',\r\n          name: '_level',\r\n          type: 'uint8',\r\n        },\r\n      ],\r\n      name: 'checkAndTryReward',\r\n      outputs: [],\r\n      stateMutability: 'nonpayable',\r\n      type: 'function',\r\n    },\r\n  ]\r\n\r\n  readAbi = [\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: 'uint256',\r\n          name: '_tokenId',\r\n          type: 'uint256',\r\n        },\r\n      ],\r\n      name: 'getSBTMeta',\r\n      outputs: [\r\n        {\r\n          components: [\r\n            {\r\n              internalType: 'string',\r\n              name: 'org',\r\n              type: 'string',\r\n            },\r\n            {\r\n              internalType: 'uint256',\r\n              name: 'time',\r\n              type: 'uint256',\r\n            },\r\n            {\r\n              internalType: 'string',\r\n              name: 'chain',\r\n              type: 'string',\r\n            },\r\n            {\r\n              internalType: 'string',\r\n              name: 'protocol',\r\n              type: 'string',\r\n            },\r\n            {\r\n              internalType: 'address',\r\n              name: 'contractAddr',\r\n              type: 'address',\r\n            },\r\n            {\r\n              internalType: 'uint256',\r\n              name: 'id',\r\n              type: 'uint256',\r\n            },\r\n            {\r\n              internalType: 'uint8',\r\n              name: 'qlevel',\r\n              type: 'uint8',\r\n            },\r\n            {\r\n              internalType: 'uint8',\r\n              name: 'qtype',\r\n              type: 'uint8',\r\n            },\r\n            {\r\n              internalType: 'uint256',\r\n              name: 'qsize',\r\n              type: 'uint256',\r\n            },\r\n            {\r\n              internalType: 'uint256',\r\n              name: 'qduration',\r\n              type: 'uint256',\r\n            },\r\n            {\r\n              internalType: 'uint256',\r\n              name: 'lowCost',\r\n              type: 'uint256',\r\n            },\r\n            {\r\n              internalType: 'string',\r\n              name: 'costUnit',\r\n              type: 'string',\r\n            },\r\n            {\r\n              internalType: 'uint16',\r\n              name: 'score',\r\n              type: 'uint16',\r\n            },\r\n            {\r\n              internalType: 'string',\r\n              name: 'ability',\r\n              type: 'string',\r\n            },\r\n            {\r\n              internalType: 'address',\r\n              name: 'owner',\r\n              type: 'address',\r\n            },\r\n            {\r\n              internalType: 'string',\r\n              name: 'examId',\r\n              type: 'string',\r\n            },\r\n            {\r\n              internalType: 'string',\r\n              name: 'picContent',\r\n              type: 'string',\r\n            },\r\n          ],\r\n          internalType: 'struct Reward.SourceDaoReward',\r\n          name: '',\r\n          type: 'tuple',\r\n        },\r\n      ],\r\n      stateMutability: 'view',\r\n      type: 'function',\r\n    },\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: 'string',\r\n          name: '_examId',\r\n          type: 'string',\r\n        },\r\n      ],\r\n      name: 'getSBTMetaByExam',\r\n      outputs: [\r\n        {\r\n          components: [\r\n            {\r\n              internalType: 'uint256',\r\n              name: 'id',\r\n              type: 'uint256',\r\n            },\r\n            {\r\n              internalType: 'uint8',\r\n              name: 'qlevel',\r\n              type: 'uint8',\r\n            },\r\n            {\r\n              internalType: 'uint8',\r\n              name: 'qtype',\r\n              type: 'uint8',\r\n            },\r\n            {\r\n              internalType: 'uint16',\r\n              name: 'score',\r\n              type: 'uint16',\r\n            },\r\n            {\r\n              internalType: 'uint256',\r\n              name: 'time',\r\n              type: 'uint256',\r\n            },\r\n            {\r\n              internalType: 'address',\r\n              name: 'owner',\r\n              type: 'address',\r\n            },\r\n            {\r\n              internalType: 'string',\r\n              name: 'examId',\r\n              type: 'string',\r\n            },\r\n          ],\r\n          internalType: 'struct Reward.SourceDaoReward',\r\n          name: '',\r\n          type: 'tuple',\r\n        },\r\n      ],\r\n      stateMutability: 'view',\r\n      type: 'function',\r\n    },\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: 'address',\r\n          name: 'user',\r\n          type: 'address',\r\n        },\r\n      ],\r\n      name: 'getTokensByUser',\r\n      outputs: [\r\n        {\r\n          internalType: 'uint256[]',\r\n          name: '',\r\n          type: 'uint256[]',\r\n        },\r\n      ],\r\n      stateMutability: 'view',\r\n      type: 'function',\r\n    },\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: 'string',\r\n          name: '_examId',\r\n          type: 'string',\r\n        },\r\n      ],\r\n      name: 'getPreSBTMetaByExam',\r\n      outputs: [\r\n        {\r\n          components: [\r\n            {\r\n              internalType: 'string',\r\n              name: 'org',\r\n              type: 'string',\r\n            },\r\n            {\r\n              internalType: 'uint256',\r\n              name: 'time',\r\n              type: 'uint256',\r\n            },\r\n            {\r\n              internalType: 'string',\r\n              name: 'chain',\r\n              type: 'string',\r\n            },\r\n            {\r\n              internalType: 'string',\r\n              name: 'protocol',\r\n              type: 'string',\r\n            },\r\n            {\r\n              internalType: 'address',\r\n              name: 'contractAddr',\r\n              type: 'address',\r\n            },\r\n            {\r\n              internalType: 'uint256',\r\n              name: 'id',\r\n              type: 'uint256',\r\n            },\r\n            {\r\n              internalType: 'uint8',\r\n              name: 'qlevel',\r\n              type: 'uint8',\r\n            },\r\n            {\r\n              internalType: 'uint8',\r\n              name: 'qtype',\r\n              type: 'uint8',\r\n            },\r\n            {\r\n              internalType: 'uint256',\r\n              name: 'qsize',\r\n              type: 'uint256',\r\n            },\r\n            {\r\n              internalType: 'uint256',\r\n              name: 'qduration',\r\n              type: 'uint256',\r\n            },\r\n            {\r\n              internalType: 'uint256',\r\n              name: 'lowCost',\r\n              type: 'uint256',\r\n            },\r\n            {\r\n              internalType: 'string',\r\n              name: 'costUnit',\r\n              type: 'string',\r\n            },\r\n            {\r\n              internalType: 'uint16',\r\n              name: 'score',\r\n              type: 'uint16',\r\n            },\r\n            {\r\n              internalType: 'string',\r\n              name: 'ability',\r\n              type: 'string',\r\n            },\r\n            {\r\n              internalType: 'address',\r\n              name: 'owner',\r\n              type: 'address',\r\n            },\r\n            {\r\n              internalType: 'string',\r\n              name: 'examId',\r\n              type: 'string',\r\n            },\r\n            {\r\n              internalType: 'string',\r\n              name: 'picContent',\r\n              type: 'string',\r\n            },\r\n          ],\r\n          internalType: 'struct Reward.SourceDaoReward',\r\n          name: '',\r\n          type: 'tuple',\r\n        },\r\n      ],\r\n      stateMutability: 'view',\r\n      type: 'function',\r\n    },\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: 'uint8',\r\n          name: '_type',\r\n          type: 'uint8',\r\n        },\r\n        {\r\n          internalType: 'uint8',\r\n          name: '_level',\r\n          type: 'uint8',\r\n        },\r\n      ],\r\n      name: 'getPreExamSBTMeta',\r\n      outputs: [\r\n        {\r\n          internalType: 'string[6]',\r\n          name: '',\r\n          type: 'string[6]',\r\n        },\r\n      ],\r\n      stateMutability: 'view',\r\n      type: 'function',\r\n    },\r\n  ]\r\n\r\n  async checkAndTryReward(\r\n    examId: string,\r\n    answers: number[],\r\n    type: number,\r\n    level: number\r\n  ) {\r\n    return this.writeContract('checkAndTryReward', examId, answers, type, level)\r\n  }\r\n\r\n  async getSBTMetaByExam(examId: string) {\r\n    return this.readContract('getSBTMetaByExam', examId)\r\n  }\r\n\r\n  async getPreExamSBTMeta(type: number, level: number) {\r\n    return this.readContract<string[]>('getPreExamSBTMeta', type, level)\r\n  }\r\n\r\n  async getTokensByUser(address: string) {\r\n    return this.readContract<string[]>('getTokensByUser', address)\r\n  }\r\n\r\n  async getSBTMeta(tokenId: number) {\r\n    return this.readContract<SourceDaoReward>('getSBTMeta', tokenId)\r\n  }\r\n\r\n  async getPreSBTMetaByExam(examId: string) {\r\n    return this.readContract<SourceDaoReward>('getPreSBTMetaByExam', examId)\r\n  }\r\n}\r\n\r\nlet instance\r\n\r\nexport default (() => {\r\n  if (instance) return instance\r\n  instance = new Reward()\r\n  return instance\r\n})()\r\n","import Contracts from '@api/contract'\r\n\r\nimport { CHECK_ADDRESS } from '@api/config'\r\n\r\nclass Check extends Contracts {\r\n  address = CHECK_ADDRESS\r\n\r\n  readAbi = [\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: 'string',\r\n          name: '_examId',\r\n          type: 'string',\r\n        },\r\n      ],\r\n      name: 'getAnswers',\r\n      outputs: [\r\n        {\r\n          internalType: 'uint8[]',\r\n          name: '',\r\n          type: 'uint8[]',\r\n        },\r\n      ],\r\n      stateMutability: 'view',\r\n      type: 'function',\r\n    },\r\n  ]\r\n\r\n  async getAnswers(examId: string) {\r\n    return this.readContract<number[]>('getAnswers', examId)\r\n  }\r\n}\r\n\r\nlet instance\r\n\r\nexport default (() => {\r\n  if (instance) return instance\r\n  instance = new Check()\r\n  return instance\r\n})()\r\n","import Contracts from '@api/contract'\r\n\r\nimport { WORKFLOW_ADDRESS } from '@api/config'\r\n\r\nclass Workflow extends Contracts {\r\n  address = WORKFLOW_ADDRESS\r\n\r\n  readAbi = [\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: 'uint8',\r\n          name: '_type',\r\n          type: 'uint8',\r\n        },\r\n      ],\r\n      name: 'getIntroduction',\r\n      outputs: [\r\n        {\r\n          internalType: 'string',\r\n          name: '',\r\n          type: 'string',\r\n        },\r\n      ],\r\n      stateMutability: 'view',\r\n      type: 'function',\r\n    },\r\n  ]\r\n\r\n  writeAbi = [\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: 'address',\r\n          name: '_to',\r\n          type: 'address',\r\n        },\r\n        {\r\n          internalType: 'string',\r\n          name: '_examId',\r\n          type: 'string',\r\n        },\r\n        {\r\n          internalType: 'uint8',\r\n          name: '_type',\r\n          type: 'uint8',\r\n        },\r\n        {\r\n          internalType: 'uint8',\r\n          name: '_level',\r\n          type: 'uint8',\r\n        },\r\n      ],\r\n      name: 'prepare',\r\n      outputs: [],\r\n      stateMutability: 'nonpayable',\r\n      type: 'function',\r\n    },\r\n    {\r\n      inputs: [\r\n        {\r\n          internalType: 'address',\r\n          name: '_to',\r\n          type: 'address',\r\n        },\r\n        {\r\n          internalType: 'string',\r\n          name: '_examId',\r\n          type: 'string',\r\n        },\r\n        {\r\n          internalType: 'uint8',\r\n          name: '_score',\r\n          type: 'uint8',\r\n        },\r\n        {\r\n          internalType: 'uint8[]',\r\n          name: '_answers',\r\n          type: 'uint8[]',\r\n        },\r\n        {\r\n          internalType: 'string',\r\n          name: '_picContent',\r\n          type: 'string',\r\n        },\r\n      ],\r\n      name: 'submit',\r\n      outputs: [],\r\n      stateMutability: 'nonpayable',\r\n      type: 'function',\r\n    },\r\n  ]\r\n\r\n  async prepare(_to: string, examId: string, type: number, level: number) {\r\n    return this.writeContract('prepare', _to, examId, type, level)\r\n  }\r\n\r\n  async getIntroduction(type: number) {\r\n    return this.readContract<string>('getIntroduction', type)\r\n  }\r\n\r\n  async submit(_to: string, examId: string, score: number, answers: number[], picContent: string) {\r\n    return this.writeContract('submit', _to, examId, score, answers, picContent)\r\n  }\r\n}\r\n\r\nlet instance\r\n\r\nexport default (() => {\r\n  if (instance) return instance\r\n  instance = new Workflow()\r\n  return instance\r\n})()\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport langHook from '@hooks/localHook'\r\nimport { certificateLang, examLang } from '@langs/index'\r\n\r\nimport { CSTLEVEL } from '@constants/exam'\r\n\r\nimport { examApi } from '@api/index'\r\n\r\nimport { truncateMiddle, dateTimeConversion } from '@utils/index'\r\nimport { catImg } from '@utils/ipfs'\r\n\r\nimport type { SourceDaoReward } from '@api/reward'\r\n\r\nimport './index.less'\r\n\r\nexport interface CertificateProps {\r\n  sbt?: string\r\n  data: SourceDaoReward\r\n}\r\n\r\nexport default ({ sbt, data }: CertificateProps): JSX.Element => {\r\n  const local = langHook()\r\n\r\n  const [name, setName] = useState('')\r\n  const [picContent, setPicContent] = useState('')\r\n\r\n  useEffect(() => {\r\n    examApi.getTypeName(data.qtype).then((res) => {\r\n      setName(res)\r\n    })\r\n    catImg(data.picContent).then((res) => {\r\n      setPicContent(res)\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"certificate\">\r\n      {name && (\r\n        <>\r\n          <img\r\n            className=\"certificate_left\"\r\n            src={sbt || picContent}\r\n          />\r\n          <div className=\"certificate_right\">\r\n            <div className=\"certificate_right_name\">\r\n              {name}（\r\n              {local(\r\n                examLang[\r\n                  (CSTLEVEL[data.qlevel] as unknown) as keyof typeof examLang\r\n                ]\r\n              )}\r\n              ）\r\n            </div>\r\n            <div className=\"certificate_right_text\"></div>\r\n            <div className=\"certificate_right_title\">\r\n              {local(certificateLang.basic)}\r\n            </div>\r\n            <div className=\"certificate_right_row certificate_right_basic\">\r\n              <div className=\"c_r_b_box\">\r\n                <div className=\"c_r_b_b_text c_r_b_b_title\">\r\n                  {local(certificateLang.iInstitution)}\r\n                </div>\r\n                <div className=\"c_r_b_b_text\">{data.org}</div>\r\n              </div>\r\n              <div className=\"c_r_b_box\">\r\n                <div className=\"c_r_b_b_text c_r_b_b_title\">\r\n                  {local(certificateLang.iTime)}\r\n                </div>\r\n                <div className=\"c_r_b_b_text\">\r\n                  {dateTimeConversion(data.time.toString())}\r\n                </div>\r\n              </div>\r\n              <div className=\"c_r_b_box\">\r\n                <div className=\"c_r_b_b_text c_r_b_b_title\">\r\n                  {local(certificateLang.eTime)}\r\n                </div>\r\n                <div className=\"c_r_b_b_text\">\r\n                  {dateTimeConversion(\r\n                    parseInt(data.time.toString()) +\r\n                      parseInt(data.qduration.toString())\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"certificate_right_title\">\r\n              {local(certificateLang.blockChainI)}\r\n            </div>\r\n            <div className=\"certificate_right_row certificate_right_clockChain\">\r\n              <div className=\"c_r_b_box\">\r\n                <div className=\"c_r_b_b_text c_r_b_b_title\">\r\n                  {local(certificateLang.blockChain)}\r\n                </div>\r\n                <div className=\"c_r_b_b_text\">{data.chain}</div>\r\n              </div>\r\n              <div className=\"c_r_b_box\">\r\n                <div className=\"c_r_b_b_text c_r_b_b_title\">\r\n                  {local(certificateLang.tStandard)}\r\n                </div>\r\n                <div className=\"c_r_b_b_text\">{data.protocol}</div>\r\n              </div>\r\n              <div className=\"c_r_b_box\">\r\n                <div className=\"c_r_b_b_text c_r_b_b_title\">\r\n                  {local(certificateLang.cAddress)}\r\n                </div>\r\n                <div className=\"c_r_b_b_text\">\r\n                  {truncateMiddle(data.contractAddr)}\r\n                </div>\r\n              </div>\r\n              <div className=\"c_r_b_box\">\r\n                <div className=\"c_r_b_b_text c_r_b_b_title\">\r\n                  {local(certificateLang.tokenID)}\r\n                </div>\r\n                <div className=\"c_r_b_b_text\">{data.id.toString()}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Divider,\r\n  List,\r\n  Typography,\r\n  useTheme,\r\n} from '@mui/material'\r\n\r\nimport langHook from '@hooks/localHook'\r\nimport { examLang, Lang } from '@langs/index'\r\n\r\nimport { ExamJson } from '../Take'\r\n\r\nimport { Palette } from '@utils/theme'\r\ninterface NavigateProps {\r\n  answers: number[]\r\n  setCurrentExam: (num: number) => void\r\n  leftText?: Lang\r\n  leftColor?: Palette\r\n  rightText?: Lang\r\n  rightColor?: Palette\r\n  exam?: Array<null | ExamJson>\r\n}\r\n\r\nexport default ({\r\n  answers,\r\n  setCurrentExam,\r\n  leftText = examLang.tbc,\r\n  leftColor = 'navLeft',\r\n  rightText = examLang.completed,\r\n  rightColor = 'navRight',\r\n  exam,\r\n}: NavigateProps): JSX.Element => {\r\n  const theme = useTheme()\r\n\r\n  const local = langHook()\r\n\r\n  return (\r\n    <Card sx={{ mb: 6 }}>\r\n      <CardContent>\r\n        <List\r\n          sx={{\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            flexWrap: 'wrap',\r\n          }}\r\n        >\r\n          {answers.map((answer, index) => {\r\n            const btnColor = exam\r\n              ? exam[index]?.standard === answer\r\n                ? leftColor\r\n                : rightColor\r\n              : answer > 0\r\n                ? leftColor\r\n                : rightColor\r\n            return (\r\n              <Button\r\n                sx={{\r\n                  minWidth: 24,\r\n                  height: 24,\r\n                  p: 0,\r\n                  m: 0.55,\r\n                }}\r\n                color={btnColor}\r\n                key={index}\r\n                variant='contained'\r\n                onClick={() => setCurrentExam(index)}\r\n              >\r\n                {index + 1}\r\n              </Button>\r\n            )\r\n          })}\r\n        </List>\r\n        <Divider component=\"li\" sx={{ mb: 2 }} />\r\n        <Box\r\n          sx={{\r\n            width: '100%',\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            justifyContent: 'space-around',\r\n          }}\r\n        >\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              flexDirection: 'row',\r\n              alignItems: 'center',\r\n            }}\r\n          >\r\n            <Box\r\n              sx={{\r\n                width: 22,\r\n                height: 22,\r\n                m: 0.55,\r\n                backgroundColor: theme.palette[leftColor].main,\r\n                borderRadius: 1,\r\n              }}\r\n            ></Box>\r\n            <Typography>{local(leftText)}</Typography>\r\n          </Box>\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              flexDirection: 'row',\r\n              alignItems: 'center',\r\n            }}\r\n          >\r\n            <Box\r\n              sx={{\r\n                width: 24,\r\n                height: 24,\r\n                m: 0.55,\r\n                backgroundColor: theme.palette[rightColor].main,\r\n                borderRadius: 1,\r\n              }}\r\n            ></Box>\r\n            <Typography>{local(rightText)}</Typography>\r\n          </Box>\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n","import React, { ChangeEvent } from 'react'\r\n\r\nimport { FormControlLabel, Radio, RadioGroup, useTheme } from '@mui/material'\r\n\r\nimport { ExamJson } from '../index'\r\n\r\ninterface RadioProps {\r\n  index: number\r\n  exam: ExamJson\r\n  initVal?: number[]\r\n  handleChange?: (e: React.ChangeEvent<HTMLInputElement>, i: number) => void\r\n}\r\n\r\nexport default ({\r\n  exam,\r\n  index,\r\n  initVal,\r\n  handleChange,\r\n}: RadioProps): JSX.Element => {\r\n  const theme = useTheme()\r\n\r\n  const mainColor = theme.palette.primary.main\r\n  const rightColor = theme.palette.navLeft.main\r\n  const errorColor = theme.palette.navRight.main\r\n\r\n  const _handleChange = (\r\n    event: ChangeEvent<HTMLInputElement>,\r\n    index: number\r\n  ) => {\r\n    if (handleChange) handleChange(event, index)\r\n  }\r\n\r\n  return (\r\n    <RadioGroup\r\n      defaultValue={initVal ? initVal[index] + '' : '0'}\r\n      onChange={(e) => _handleChange(e, index)}\r\n    >\r\n      {exam.options.map((o, i) => {\r\n        const value = i + 1\r\n        const color = initVal\r\n          ? exam.standard === value\r\n            ? rightColor\r\n            : initVal[index] === value\r\n              ? errorColor\r\n              : mainColor\r\n          : mainColor\r\n        return (\r\n          <FormControlLabel\r\n            key={i}\r\n            value={value}\r\n            control={\r\n              initVal ? (\r\n                <Radio\r\n                  sx={{\r\n                    color: color,\r\n                    '&.Mui-checked': {\r\n                      color: color,\r\n                    },\r\n                  }}\r\n                  checked={initVal[index] === value}\r\n                />\r\n              ) : (\r\n                <Radio />\r\n              )\r\n            }\r\n            label={o}\r\n            sx={{\r\n              color,\r\n            }}\r\n          />\r\n        )\r\n      })}\r\n    </RadioGroup>\r\n  )\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\n\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Divider,\r\n  Skeleton,\r\n  Typography,\r\n} from '@mui/material'\r\n\r\nimport Radio from './Radio'\r\n\r\ninterface TakeProps {\r\n  exam: Array<null | ExamJson>\r\n  currentExam: number\r\n  handleChange?: (e: React.ChangeEvent<HTMLInputElement>, i: number) => void\r\n  initVal?: number[]\r\n}\r\n\r\nexport interface ExamJson {\r\n  type: string\r\n  level: 1 | 2 | 3\r\n  stem: string\r\n  options: string[]\r\n  standard: number\r\n}\r\n\r\nexport default ({\r\n  exam,\r\n  currentExam,\r\n  handleChange,\r\n  initVal,\r\n}: TakeProps): JSX.Element => {\r\n  const cardRef = useRef<HTMLDivElement>(null)\r\n  const boxRefs = useRef<{ [key: string]: HTMLDivElement }>({})\r\n\r\n  useEffect(() => {\r\n    const top = boxRefs.current[currentExam]?.offsetTop\r\n\r\n    if (top) cardRef.current?.scrollTo({ top: top - 213, behavior: 'smooth' })\r\n  }, [currentExam])\r\n\r\n  return (\r\n    <Card\r\n      ref={cardRef}\r\n      sx={{\r\n        height: 'calc(100vh - 230px)',\r\n        overflowY: 'auto',\r\n        '&::-webkit-scrollbar': {\r\n          width: 10,\r\n        },\r\n        '&::-webkit-scrollbar-track': {\r\n          backgroundColor: '#f5f7fa',\r\n        },\r\n        '&::-webkit-scrollbar-thumb': {\r\n          backgroundColor: '#e4e7ed',\r\n          borderRadius: 2,\r\n        },\r\n      }}\r\n    >\r\n      <CardContent>\r\n        {exam.map((item, index) => {\r\n          return (\r\n            <Box\r\n              ref={(r: HTMLDivElement) => {\r\n                boxRefs.current[index] = r\r\n              }}\r\n              key={index}\r\n              sx={{\r\n                boxSizing: 'border-box',\r\n                p: 3,\r\n              }}\r\n            >\r\n              {item ? (\r\n                <Box>\r\n                  <Typography\r\n                    sx={{\r\n                      mb: 4,\r\n                    }}\r\n                  >\r\n                    {index + 1}. {item.stem}\r\n                  </Typography>\r\n                  <Radio\r\n                    exam={item}\r\n                    index={index}\r\n                    handleChange={handleChange}\r\n                    initVal={initVal}\r\n                  />\r\n                </Box>\r\n              ) : (\r\n                <Box>\r\n                  <Skeleton\r\n                    variant=\"text\"\r\n                    animation=\"wave\"\r\n                    width={600}\r\n                    height={26}\r\n                    sx={{ mb: 4 }}\r\n                  />\r\n                  <Skeleton\r\n                    variant=\"text\"\r\n                    animation=\"wave\"\r\n                    width={300}\r\n                    height={26}\r\n                    sx={{ mb: 1.5 }}\r\n                  />\r\n                  <Skeleton\r\n                    variant=\"text\"\r\n                    animation=\"wave\"\r\n                    width={300}\r\n                    height={26}\r\n                    sx={{ mb: 1.5 }}\r\n                  />\r\n                  <Skeleton\r\n                    variant=\"text\"\r\n                    animation=\"wave\"\r\n                    width={300}\r\n                    height={26}\r\n                    sx={{ mb: 1.5 }}\r\n                  />\r\n                  <Skeleton\r\n                    variant=\"text\"\r\n                    animation=\"wave\"\r\n                    width={300}\r\n                    height={26}\r\n                    sx={{ mb: 1.5 }}\r\n                  />\r\n                </Box>\r\n              )}\r\n              {index < exam.length - 1 && <Divider sx={{ mt: 4 }} />}\r\n            </Box>\r\n          )\r\n        })}\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport { utils } from 'ethers'\r\n\r\nimport { Box, Card, CardContent, Typography } from '@mui/material'\r\n\r\nimport langHook from '@hooks/localHook'\r\nimport { examLang, introduceLang, profileLang } from '@langs/index'\r\n\r\nimport { CSTLEVEL } from '@constants/exam'\r\n\r\nexport interface TitleProps {\r\n  name: string\r\n  level: keyof typeof CSTLEVEL\r\n  duration?: number\r\n  total?: string\r\n  time?: string\r\n  lowCost?: number\r\n  costUnit?: string\r\n}\r\n\r\nexport default ({\r\n  name,\r\n  duration,\r\n  total,\r\n  level,\r\n  time,\r\n  lowCost,\r\n  costUnit,\r\n}: TitleProps): JSX.Element => {\r\n  const local = langHook()\r\n\r\n  const examSubtitle = (\r\n    <Box>\r\n      <Typography component=\"span\" sx={{ mr: 4 }}>\r\n        {local(introduceLang.duration)}\r\n      </Typography>\r\n      <Typography component=\"span\" sx={{ mr: 12 }}>\r\n        {duration + local(introduceLang.mins)}\r\n      </Typography>\r\n      <Typography component=\"span\" sx={{ mr: 4 }}>\r\n        {local(introduceLang.noq)}\r\n      </Typography>\r\n      <Typography component=\"span\">\r\n        {total + local(introduceLang.question)}\r\n      </Typography>\r\n    </Box>\r\n  )\r\n\r\n  const examDetailsSubtitle = (\r\n    <Box>\r\n      <Typography component=\"span\" sx={{ mr: 4 }}>\r\n        {local(profileLang.submittedTime)}\r\n      </Typography>\r\n      <Typography component=\"span\" sx={{ mr: 12 }}>\r\n        {time}\r\n      </Typography>\r\n      <Typography component=\"span\" sx={{ mr: 4 }}>\r\n        {local(profileLang.fee)}\r\n      </Typography>\r\n      {lowCost && (\r\n        <Typography component=\"span\">\r\n          {utils.formatEther(lowCost!) + costUnit!}\r\n        </Typography>\r\n      )}\r\n    </Box>\r\n  )\r\n\r\n  return (\r\n    <Card sx={{ mb: 6 }}>\r\n      <CardContent>\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            mb: 3.6,\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Typography>{name}</Typography>\r\n          <Box\r\n            sx={{\r\n              ml: 2,\r\n              p: 0.5,\r\n              pl: 1.5,\r\n              pr: 1.5,\r\n              backgroundColor: '#ccc',\r\n              fontSize: 12,\r\n            }}\r\n          >\r\n            {local(\r\n              examLang[(CSTLEVEL[level] as unknown) as keyof typeof examLang]\r\n            )}\r\n          </Box>\r\n        </Box>\r\n        {duration && total ? examSubtitle : examDetailsSubtitle}\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n","export enum LEVEL {\r\n  'primary' = '1',\r\n  'intermediate' = '2',\r\n  'advanced' = '3',\r\n}\r\n\r\nexport const CSTLEVEL = {\r\n  [LEVEL.primary]: 'primary',\r\n  [LEVEL.intermediate]: 'intermediate',\r\n  [LEVEL.advanced]: 'advanced',\r\n}\r\n\r\nexport const CSTSCORELEVEL = {\r\n  '1': 2,\r\n  '2': 3,\r\n  '3': 5,\r\n}\r\n","// import { create, IPFSHTTPClient } from 'ipfs-http-client'\r\nimport { create, IPFS } from 'ipfs-core'\r\n\r\nlet _ipfs: IPFS | undefined = undefined\r\n\r\nconst createIpfs = async () => {\r\n  if (_ipfs) return _ipfs\r\n  return (_ipfs = await create({\r\n    // host: '15.152.36.175',\r\n    // port: 5001,\r\n  }))\r\n}\r\n\r\nexport const add = async (file: File): Promise<string> => {\r\n  const ipfs = await createIpfs()\r\n\r\n  try {\r\n    const added = await ipfs.add(file)\r\n    return added.cid.toString()\r\n  } catch (error) {\r\n    throw Error(error as string)\r\n  }\r\n}\r\n\r\nexport const cat = async <T>(cids: string[]): Promise<T[]> => {\r\n  const ipfs = await createIpfs()\r\n  const examJson: Promise<T>[] = []\r\n  cids.forEach((cid) => {\r\n    examJson.push(\r\n      new Promise(async (resolve) => {\r\n        for await (const chunks of ipfs.cat(cid)) {\r\n          resolve(JSON.parse(utf8ArrayToStr(chunks)))\r\n        }\r\n      })\r\n    )\r\n  })\r\n\r\n  return await Promise.all(examJson)\r\n}\r\n\r\nexport const catImg = async (cid: string): Promise<string> => {\r\n  const ipfs = await createIpfs()\r\n  let _chunks: Uint8Array | undefined\r\n  return new Promise(async (resolve) => {\r\n    for await (const chunks of ipfs.cat(cid)) {\r\n      if (!_chunks) {\r\n        _chunks = chunks\r\n      } else {\r\n        _chunks = concatenate(_chunks, chunks)\r\n      }\r\n    }\r\n\r\n    resolve(get_image(_chunks!))\r\n  })\r\n}\r\n\r\nexport const path = (hash: string): string =>\r\n  `http://15.152.36.175:5001/ipfs/${hash}`\r\n\r\nconst utf8ArrayToStr = (array: Uint8Array): string => {\r\n  const len = array.length\r\n  let out, i, c, char2, char3\r\n\r\n  out = ''\r\n\r\n  i = 0\r\n  while (i < len) {\r\n    c = array[i++]\r\n    switch (c >> 4) {\r\n      case 0:\r\n      case 1:\r\n      case 2:\r\n      case 3:\r\n      case 4:\r\n      case 5:\r\n      case 6:\r\n      case 7:\r\n        out += String.fromCharCode(c)\r\n        break\r\n      case 12:\r\n      case 13:\r\n        char2 = array[i++]\r\n        out += String.fromCharCode(((c & 0x1f) << 6) | (char2 & 0x3f))\r\n        break\r\n      case 14:\r\n        char2 = array[i++]\r\n        char3 = array[i++]\r\n        out += String.fromCharCode(\r\n          ((c & 0x0f) << 12) | ((char2 & 0x3f) << 6) | ((char3 & 0x3f) << 0)\r\n        )\r\n        break\r\n    }\r\n  }\r\n\r\n  return out\r\n}\r\n\r\nconst get_image = (array: Uint8Array): string => {\r\n  const arrayBufferView = new Uint8Array(array)\r\n  const blob = new Blob([arrayBufferView], { type: 'image/jpeg' })\r\n  const urlCreator = window.URL || window.webkitURL\r\n  const imageUrl = urlCreator.createObjectURL(blob)\r\n  return imageUrl\r\n}\r\n\r\nconst concatenate = (...arrays: Uint8Array[]) => {\r\n  let totalLength = 0\r\n  for (const arr of arrays) {\r\n    totalLength += arr.length\r\n  }\r\n  const result = new Uint8Array(totalLength)\r\n  let offset = 0\r\n  for (const arr of arrays) {\r\n    result.set(arr, offset)\r\n    offset += arr.length\r\n  }\r\n  return result\r\n}\r\n"],"names":["instance","Contracts","currentWallet","store","wallet","getProvider","provider","signer","getSigner","_writeContract","ethers","address","writeAbi","_readContract","readAbi","api","this","Error","arg","EXAM_ADDRESS","REWARD_ADDRESS","CHECK_ADDRESS","WORKFLOW_ADDRESS","inputs","internalType","name","type","outputs","stateMutability","components","examId","level","writeContract","readContract","answers","tokenId","_to","score","picContent","sbt","data","local","langHook","useState","setName","setPicContent","useEffect","examApi","qtype","then","res","catImg","className","src","examLang","CSTLEVEL","qlevel","certificateLang","org","dateTimeConversion","time","toString","parseInt","qduration","chain","protocol","truncateMiddle","contractAddr","id","setCurrentExam","leftText","leftColor","rightText","rightColor","exam","theme","useTheme","sx","mb","display","flexDirection","flexWrap","map","answer","index","btnColor","standard","minWidth","height","p","m","color","key","variant","onClick","component","width","justifyContent","alignItems","backgroundColor","palette","main","borderRadius","initVal","handleChange","mainColor","primary","navLeft","errorColor","navRight","RadioGroup","defaultValue","onChange","e","event","_handleChange","options","o","i","value","FormControlLabel","control","Radio","checked","label","currentExam","cardRef","useRef","boxRefs","top","current","offsetTop","scrollTo","behavior","Card","ref","overflowY","CardContent","item","Box","r","boxSizing","Typography","stem","Skeleton","animation","length","Divider","mt","duration","total","lowCost","costUnit","examSubtitle","mr","introduceLang","examDetailsSubtitle","profileLang","utils","ml","pl","pr","fontSize","LEVEL","intermediate","advanced","CSTSCORELEVEL","_ipfs","undefined","createIpfs","create","add","file","ipfs","added","cid","cat","cids","examJson","forEach","push","Promise","resolve","chunks","JSON","parse","utf8ArrayToStr","all","_chunks","concatenate","get_image","array","out","c","char2","char3","len","String","fromCharCode","arrayBufferView","Uint8Array","blob","Blob","window","URL","webkitURL","createObjectURL","totalLength","arrays","arr","result","offset","set"],"sourceRoot":""}