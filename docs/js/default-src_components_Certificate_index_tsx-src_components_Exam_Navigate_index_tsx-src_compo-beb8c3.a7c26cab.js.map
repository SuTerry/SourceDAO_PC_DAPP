{"version":3,"file":"js/default-src_components_Certificate_index_tsx-src_components_Exam_Navigate_index_tsx-src_compo-beb8c3.a7c26cab.js","mappings":"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AER,CACEF,aAAc,UACdC,KAAM,eACNC,KAAM,WAER,CACEF,aAAc,UACdC,KAAM,KACNC,KAAM,WAER,CACEF,aAAc,QACdC,KAAM,SACNC,KAAM,SAER,CACEF,aAAc,QACdC,KAAM,QACNC,KAAM,SAER,CACEF,aAAc,UACdC,KAAM,QACNC,KAAM,WAER,CACEF,aAAc,UACdC,KAAM,YACNC,KAAM,WAER,CACEF,aAAc,UACdC,KAAM,UACNC,KAAM,WAER,CACEF,aAAc,SACdC,KAAM,WACNC,KAAM,UAER,CACEF,aAAc,SACdC,KAAM,QACNC,KAAM,UAER,CACEF,aAAc,SACdC,KAAM,UACNC,KAAM,UAER,CACEF,aAAc,UACdC,KAAM,QACNC,KAAM,WAER,CACEF,aAAc,SACdC,KAAM,SACNC,KAAM,UAER,CACEF,aAAc,SACdC,KAAM,aACNC,KAAM,WAGVF,aAAc,gCACdC,KAAM,GACNC,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEC,aAAc,SACdC,KAAM,UACNC,KAAM,WAGVD,KAAM,mBACNE,QAAS,CACP,CACEE,WAAY,CACV,CACEL,aAAc,UACdC,KAAM,KACNC,KAAM,WAER,CACEF,aAAc,QACdC,KAAM,SACNC,KAAM,SAER,CACEF,aAAc,QACdC,KAAM,QACNC,KAAM,SAER,CACEF,aAAc,SACdC,KAAM,QACNC,KAAM,UAER,CACEF,aAAc,UACdC,KAAM,OACNC,KAAM,WAER,CACEF,aAAc,UACdC,KAAM,QACNC,KAAM,WAER,CACEF,aAAc,SACdC,KAAM,SACNC,KAAM,WAGVF,aAAc,gCACdC,KAAM,GACNC,KAAM,UAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEC,aAAc,UACdC,KAAM,OACNC,KAAM,YAGVD,KAAM,kBACNE,QAAS,CACP,CACEH,aAAc,YACdC,KAAM,GACNC,KAAM,cAGVE,gBAAiB,OACjBF,KAAM,YAER,CACEH,OAAQ,CACN,CACEC,aAAc,SACdC,KAAM,UACNC,KAAM,WAGVD,KAAM,sBACNE,QAAS,CACP,CACEE,WA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","sources":["webpack://sourcedao-pc-dapp/./src/api/contract.ts","webpack://sourcedao-pc-dapp/./src/api/exam/index.ts","webpack://sourcedao-pc-dapp/./src/api/config.ts","webpack://sourcedao-pc-dapp/./src/api/reward/index.ts","webpack://sourcedao-pc-dapp/./src/api/check/index.ts","webpack://sourcedao-pc-dapp/./src/api/workflow/index.tsx","webpack://sourcedao-pc-dapp/./src/api/axios/intercept.ts","webpack://sourcedao-pc-dapp/./src/api/axios/index.ts","webpack://sourcedao-pc-dapp/./src/api/center/index.ts","webpack://sourcedao-pc-dapp/./src/components/Certificate/index.tsx","webpack://sourcedao-pc-dapp/./src/components/Exam/Navigate/index.tsx","webpack://sourcedao-pc-dapp/./src/components/Exam/Take/Radio/index.tsx","webpack://sourcedao-pc-dapp/./src/components/Exam/Take/index.tsx","webpack://sourcedao-pc-dapp/./src/components/Exam/Title/index.tsx","webpack://sourcedao-pc-dapp/./src/constants/exam.ts"],"sourcesContent":["import { ethers } from 'ethers'\n\nimport store from '@store/index'\n\nimport { getProvider } from '@utils/wallets'\n\ninterface WriteContractResult {\n  wait: () => Promise<void>\n}\n\nexport default class Contracts {\n  protected address = ''\n  protected writeAbi: ethers.ContractInterface = []\n  protected readAbi: ethers.ContractInterface = []\n\n  private _writeContract: ethers.Contract | undefined\n  private _readContract: ethers.Contract | undefined\n\n  constructor() {\n    (async () => {\n      const { currentWallet } = store.getState().wallet\n\n      const provider = await getProvider(currentWallet)\n\n      if (provider) {\n        const signer = provider.getSigner()\n\n        this._writeContract = new ethers.Contract(\n          this.address,\n          this.writeAbi,\n          signer\n        )\n\n        this._readContract = new ethers.Contract(\n          this.address,\n          this.readAbi,\n          provider\n        )\n      }\n    })()\n  }\n\n  protected writeContract(\n    api: string,\n    ...arg: unknown[]\n  ): Promise<WriteContractResult> {\n    if (!this._writeContract) throw Error('wallet unconnet')\n    return this._writeContract[api](...arg)\n  }\n\n  protected readContract<T>(api: string, ...arg: unknown[]): T {\n    if (!this._readContract) throw Error('wallet unconnet')\n    return this._readContract[api](...arg)\n  }\n}\n","import Contracts from '@api/contract'\n\nimport { EXAM_ADDRESS } from '@api/config'\n\nexport interface ExamType {\n  typeId: number\n  name: string\n}\n\nexport interface ExamLevel {\n  levelId: number\n  name: string\n}\n\nexport interface ExaminationMeta {\n  _examId: string\n  _level: number\n  _type: number\n  _time: number\n  _questions: string[]\n}\n\nclass Exam extends Contracts {\n  address = EXAM_ADDRESS\n\n  writeAbi = [\n    {\n      inputs: [\n        {\n          internalType: 'string',\n          name: '_examId',\n          type: 'string',\n        },\n        {\n          internalType: 'uint8',\n          name: '_type',\n          type: 'uint8',\n        },\n        {\n          internalType: 'uint8',\n          name: '_level',\n          type: 'uint8',\n        },\n      ],\n      name: 'genExam',\n      outputs: [],\n      stateMutability: 'nonpayable',\n      type: 'function',\n    },\n  ]\n\n  readAbi = [\n    {\n      inputs: [\n        {\n          internalType: 'string',\n          name: '_examId',\n          type: 'string',\n        },\n      ],\n      name: 'getExam',\n      outputs: [\n        {\n          internalType: 'string[]',\n          name: '',\n          type: 'string[]',\n        },\n      ],\n      stateMutability: 'view',\n      type: 'function',\n    },\n    {\n      inputs: [\n        {\n          internalType: 'uint8',\n          name: 'qtype',\n          type: 'uint8',\n        },\n        {\n          internalType: 'uint8',\n          name: 'qlevel',\n          type: 'uint8',\n        },\n      ],\n      name: 'getExaminationDuration',\n      outputs: [\n        {\n          internalType: 'uint16',\n          name: '',\n          type: 'uint16',\n        },\n      ],\n      stateMutability: 'view',\n      type: 'function',\n    },\n    {\n      inputs: [],\n      name: 'listTypes',\n      outputs: [\n        {\n          components: [\n            {\n              internalType: 'uint8',\n              name: 'typeId',\n              type: 'uint8',\n            },\n            {\n              internalType: 'string',\n              name: 'name',\n              type: 'string',\n            },\n          ],\n          internalType: 'struct IExamination.ExamType[]',\n          name: '',\n          type: 'tuple[]',\n        },\n      ],\n      stateMutability: 'view',\n      type: 'function',\n    },\n    {\n      inputs: [],\n      name: 'listLevels',\n      outputs: [\n        {\n          components: [\n            {\n              internalType: 'uint8',\n              name: 'levelId',\n              type: 'uint8',\n            },\n            {\n              internalType: 'string',\n              name: 'name',\n              type: 'string',\n            },\n          ],\n          internalType: 'struct IExamination.ExamLevel[]',\n          name: '',\n          type: 'tuple[]',\n        },\n      ],\n      stateMutability: 'view',\n      type: 'function',\n    },\n    {\n      inputs: [\n        {\n          internalType: 'address',\n          name: '_user',\n          type: 'address',\n        },\n      ],\n      name: 'getExamsByUser',\n      outputs: [\n        {\n          internalType: 'string[]',\n          name: '',\n          type: 'string[]',\n        },\n      ],\n      stateMutability: 'view',\n      type: 'function',\n    },\n    {\n      inputs: [\n        {\n          internalType: 'string',\n          name: '_examId',\n          type: 'string',\n        },\n      ],\n      name: 'getExaminationMeta',\n      outputs: [\n        {\n          components: [\n            {\n              internalType: 'uint256',\n              name: '_time',\n              type: 'uint256',\n            },\n            {\n              internalType: 'uint8',\n              name: '_type',\n              type: 'uint8',\n            },\n            {\n              internalType: 'uint8',\n              name: '_level',\n              type: 'uint8',\n            },\n            {\n              internalType: 'string',\n              name: '_examId',\n              type: 'string',\n            },\n            {\n              internalType: 'string[]',\n              name: '_questions',\n              type: 'string[]',\n            },\n          ],\n          internalType: 'struct IExamination.UserExamination',\n          name: '',\n          type: 'tuple',\n        },\n      ],\n      stateMutability: 'view',\n      type: 'function',\n    },\n    {\n      inputs: [\n        {\n          internalType: 'uint8',\n          name: '_type',\n          type: 'uint8',\n        },\n      ],\n      name: 'getTypeName',\n      outputs: [\n        {\n          internalType: 'string',\n          name: '',\n          type: 'string',\n        },\n      ],\n      stateMutability: 'view',\n      type: 'function',\n    },\n  ]\n\n  async genExam(examId: string, type: number, level: number) {\n    return this.writeContract('genExam', examId, type, level)\n  }\n\n  async getExam(examId: string) {\n    return this.readContract<string[]>('getExam', examId)\n  }\n\n  async listTypes() {\n    return this.readContract<ExamType[]>('listTypes')\n  }\n\n  async listLevels() {\n    return this.readContract<ExamLevel[]>('listLevels')\n  }\n\n  async getExaminationDuration(type: number, level: number) {\n    return this.readContract<number>('getExaminationDuration', type, level)\n  }\n\n  async getExamsByUser(address: string) {\n    return this.readContract<string[]>('getExamsByUser', address)\n  }\n\n  async getExaminationMeta(examId: string) {\n    return this.readContract<ExaminationMeta>('getExaminationMeta', examId)\n  }\n\n  async getTypeName(type: number) {\n    return this.readContract<string>('getTypeName', type)\n  }\n}\n\nlet instance\n\nexport default (() => {\n  if (instance) return instance\n  instance = new Exam()\n  return instance\n})()\n","const env = process.env.WEB_ENV\n\n// exam\nexport const EXAM_ADDRESS = (env === 'pro') ? ''\n  : (env === 'pre' ? ''\n    : (env === 'sit' ? '0x6d581bE549490098c76B66e508A7064dC632FFD6'\n      : (env === 'dev' ? '0x6d581bE549490098c76B66e508A7064dC632FFD6'\n        : '0x6d581bE549490098c76B66e508A7064dC632FFD6')))\n\n// reward\nexport const REWARD_ADDRESS = (env === 'pro') ? ''\n  : (env === 'pre' ? ''\n    : (env === 'sit' ? '0x8a44cD755DdE378E721Fbc9c149c8237AB96cb12'\n      : (env === 'dev' ? '0x8a44cD755DdE378E721Fbc9c149c8237AB96cb12'\n        : '0x8a44cD755DdE378E721Fbc9c149c8237AB96cb12')))\n\n// check\nexport const CHECK_ADDRESS = (env === 'pro') ? ''\n  : (env === 'pre' ? ''\n    : (env === 'sit' ? '0x6AF4404C2ee6cdaEeBf7Dd50775d71F233b04caa'\n      : (env === 'dev' ? '0x6AF4404C2ee6cdaEeBf7Dd50775d71F233b04caa'\n        : '0x6AF4404C2ee6cdaEeBf7Dd50775d71F233b04caa')))\n\n// Workflow\nexport const WORKFLOW_ADDRESS = (env === 'pro') ? ''\n  : (env === 'pre' ? ''\n    : (env === 'sit' ? '0x0854ba02173B93904Cb8c6C7e944afA477E4c6f7'\n      : (env === 'dev' ? '0x0854ba02173B93904Cb8c6C7e944afA477E4c6f7'\n        : '0x0854ba02173B93904Cb8c6C7e944afA477E4c6f7')))\n\n// API_HOST\nexport const API_HOST = (env === 'pro') ? ''\n  : (env === 'pre' ? ''\n    : (env === 'sit' ? '//15.152.36.175:8080'\n      : (env === 'dev' ? '//15.152.36.175:8080'\n        : '//15.152.36.175:8080')))\n\n// IPFS_HOST\nexport const IPFS_HOST = (env === 'pro') ? ' '\n  : (env === 'pre' ? ' '\n    : (env === 'sit' ? ' '\n      : (env === 'dev' ? ' '\n        : '/api')))\n// export const IPFS_HOST = (env === 'pro') ? ''\n//   : (env === 'pre' ? ''\n//     : (env === 'sit' ? '//15.152.36.175:5001'\n//       : (env === 'dev' ? '//15.152.36.175:5001'\n//         : '//15.152.36.175:5001')))","import Contracts from '@api/contract'\n\nimport { REWARD_ADDRESS } from '@api/config'\n\nimport { CSTLEVEL } from '@constants/exam'\n\nexport interface SourceDaoReward {\n  // 基础信息\n  org: string // 颁发机构\n  time: number // 颁发时间，使用区块时间\n  // 区块链信息\n  chain: string // 区块链\n  protocol: string // 协议\n  contractAddr: string // 合约地址\n  id: number // SBT id\n  qlevel: keyof typeof CSTLEVEL // 考试的难度\n  qtype: number // 考试的类型\n  qsize: number // 试题数量\n  qduration: number // 考试时长，分钟\n  lowCost: number // 考试门槛，10E-6\n  costUnit: string // 考试费用单位\n  address: string // 考试人\n  picContent: string // 图片内容，例如IPFS hash\n  score: number // 考试分数\n  examId: string // 试卷ID\n}\n\nclass Reward extends Contracts {\n  address = REWARD_ADDRESS\n\n  writeAbi = [\n    {\n      inputs: [\n        {\n          internalType: 'string',\n          name: '_examId',\n          type: 'string',\n        },\n        {\n          internalType: 'uint8[]',\n          name: '_answers',\n          type: 'uint8[]',\n        },\n        {\n          internalType: 'uint8',\n          name: '_type',\n          type: 'uint8',\n        },\n        {\n          internalType: 'uint8',\n          name: '_level',\n          type: 'uint8',\n        },\n      ],\n      name: 'checkAndTryReward',\n      outputs: [],\n      stateMutability: 'nonpayable',\n      type: 'function',\n    },\n  ]\n\n  readAbi = [\n    {\n      inputs: [\n        {\n          internalType: 'uint256',\n          name: '_tokenId',\n          type: 'uint256',\n        },\n      ],\n      name: 'getSBTMeta',\n      outputs: [\n        {\n          components: [\n            {\n              internalType: 'string',\n              name: 'org',\n              type: 'string',\n            },\n            {\n              internalType: 'uint256',\n              name: 'time',\n              type: 'uint256',\n            },\n            {\n              internalType: 'string',\n              name: 'chain',\n              type: 'string',\n            },\n            {\n              internalType: 'string',\n              name: 'protocol',\n              type: 'string',\n            },\n            {\n              internalType: 'address',\n              name: 'contractAddr',\n              type: 'address',\n            },\n            {\n              internalType: 'uint256',\n              name: 'id',\n              type: 'uint256',\n            },\n            {\n              internalType: 'uint8',\n              name: 'qlevel',\n              type: 'uint8',\n            },\n            {\n              internalType: 'uint8',\n              name: 'qtype',\n              type: 'uint8',\n            },\n            {\n              internalType: 'uint256',\n              name: 'qsize',\n              type: 'uint256',\n            },\n            {\n              internalType: 'uint256',\n              name: 'qduration',\n              type: 'uint256',\n            },\n            {\n              internalType: 'uint256',\n              name: 'lowCost',\n              type: 'uint256',\n            },\n            {\n              internalType: 'string',\n              name: 'costUnit',\n              type: 'string',\n            },\n            {\n              internalType: 'uint16',\n              name: 'score',\n              type: 'uint16',\n            },\n            {\n              internalType: 'string',\n              name: 'ability',\n              type: 'string',\n            },\n            {\n              internalType: 'address',\n              name: 'owner',\n              type: 'address',\n            },\n            {\n              internalType: 'string',\n              name: 'examId',\n              type: 'string',\n            },\n            {\n              internalType: 'string',\n              name: 'picContent',\n              type: 'string',\n            },\n          ],\n          internalType: 'struct Reward.SourceDaoReward',\n          name: '',\n          type: 'tuple',\n        },\n      ],\n      stateMutability: 'view',\n      type: 'function',\n    },\n    {\n      inputs: [\n        {\n          internalType: 'string',\n          name: '_examId',\n          type: 'string',\n        },\n      ],\n      name: 'getSBTMetaByExam',\n      outputs: [\n        {\n          components: [\n            {\n              internalType: 'uint256',\n              name: 'id',\n              type: 'uint256',\n            },\n            {\n              internalType: 'uint8',\n              name: 'qlevel',\n              type: 'uint8',\n            },\n            {\n              internalType: 'uint8',\n              name: 'qtype',\n              type: 'uint8',\n            },\n            {\n              internalType: 'uint16',\n              name: 'score',\n              type: 'uint16',\n            },\n            {\n              internalType: 'uint256',\n              name: 'time',\n              type: 'uint256',\n            },\n            {\n              internalType: 'address',\n              name: 'owner',\n              type: 'address',\n            },\n            {\n              internalType: 'string',\n              name: 'examId',\n              type: 'string',\n            },\n          ],\n          internalType: 'struct Reward.SourceDaoReward',\n          name: '',\n          type: 'tuple',\n        },\n      ],\n      stateMutability: 'view',\n      type: 'function',\n    },\n    {\n      inputs: [\n        {\n          internalType: 'address',\n          name: 'user',\n          type: 'address',\n        },\n      ],\n      name: 'getTokensByUser',\n      outputs: [\n        {\n          internalType: 'uint256[]',\n          name: '',\n          type: 'uint256[]',\n        },\n      ],\n      stateMutability: 'view',\n      type: 'function',\n    },\n    {\n      inputs: [\n        {\n          internalType: 'string',\n          name: '_examId',\n          type: 'string',\n        },\n      ],\n      name: 'getPreSBTMetaByExam',\n      outputs: [\n        {\n          components: [\n            {\n              internalType: 'string',\n              name: 'org',\n              type: 'string',\n            },\n            {\n              internalType: 'uint256',\n              name: 'time',\n              type: 'uint256',\n            },\n            {\n              internalType: 'string',\n              name: 'chain',\n              type: 'string',\n            },\n            {\n              internalType: 'string',\n              name: 'protocol',\n              type: 'string',\n            },\n            {\n              internalType: 'address',\n              name: 'contractAddr',\n              type: 'address',\n            },\n            {\n              internalType: 'uint256',\n              name: 'id',\n              type: 'uint256',\n            },\n            {\n              internalType: 'uint8',\n              name: 'qlevel',\n              type: 'uint8',\n            },\n            {\n              internalType: 'uint8',\n              name: 'qtype',\n              type: 'uint8',\n            },\n            {\n              internalType: 'uint256',\n              name: 'qsize',\n              type: 'uint256',\n            },\n            {\n              internalType: 'uint256',\n              name: 'qduration',\n              type: 'uint256',\n            },\n            {\n              internalType: 'uint256',\n              name: 'lowCost',\n              type: 'uint256',\n            },\n            {\n              internalType: 'string',\n              name: 'costUnit',\n              type: 'string',\n            },\n            {\n              internalType: 'uint16',\n              name: 'score',\n              type: 'uint16',\n            },\n            {\n              internalType: 'string',\n              name: 'ability',\n              type: 'string',\n            },\n            {\n              internalType: 'address',\n              name: 'owner',\n              type: 'address',\n            },\n            {\n              internalType: 'string',\n              name: 'examId',\n              type: 'string',\n            },\n            {\n              internalType: 'string',\n              name: 'picContent',\n              type: 'string',\n            },\n          ],\n          internalType: 'struct Reward.SourceDaoReward',\n          name: '',\n          type: 'tuple',\n        },\n      ],\n      stateMutability: 'view',\n      type: 'function',\n    },\n    {\n      inputs: [\n        {\n          internalType: 'uint8',\n          name: '_type',\n          type: 'uint8',\n        },\n        {\n          internalType: 'uint8',\n          name: '_level',\n          type: 'uint8',\n        },\n      ],\n      name: 'getPreExamSBTMeta',\n      outputs: [\n        {\n          internalType: 'string[6]',\n          name: '',\n          type: 'string[6]',\n        },\n      ],\n      stateMutability: 'view',\n      type: 'function',\n    },\n  ]\n\n  async checkAndTryReward(\n    examId: string,\n    answers: number[],\n    type: number,\n    level: number\n  ) {\n    return this.writeContract('checkAndTryReward', examId, answers, type, level)\n  }\n\n  async getSBTMetaByExam(examId: string) {\n    return this.readContract('getSBTMetaByExam', examId)\n  }\n\n  async getPreExamSBTMeta(type: number, level: number) {\n    return this.readContract<string[]>('getPreExamSBTMeta', type, level)\n  }\n\n  async getTokensByUser(address: string) {\n    return this.readContract<string[]>('getTokensByUser', address)\n  }\n\n  async getSBTMeta(tokenId: number) {\n    return this.readContract<SourceDaoReward>('getSBTMeta', tokenId)\n  }\n\n  async getPreSBTMetaByExam(examId: string) {\n    return this.readContract<SourceDaoReward>('getPreSBTMetaByExam', examId)\n  }\n}\n\nlet instance\n\nexport default (() => {\n  if (instance) return instance\n  instance = new Reward()\n  return instance\n})()\n","import Contracts from '@api/contract'\n\nimport { CHECK_ADDRESS } from '@api/config'\n\nclass Check extends Contracts {\n  address = CHECK_ADDRESS\n\n  readAbi = [\n    {\n      inputs: [\n        {\n          internalType: 'string',\n          name: '_examId',\n          type: 'string',\n        },\n      ],\n      name: 'getAnswers',\n      outputs: [\n        {\n          internalType: 'uint8[]',\n          name: '',\n          type: 'uint8[]',\n        },\n      ],\n      stateMutability: 'view',\n      type: 'function',\n    },\n  ]\n\n  async getAnswers(examId: string) {\n    return this.readContract<number[]>('getAnswers', examId)\n  }\n}\n\nlet instance\n\nexport default (() => {\n  if (instance) return instance\n  instance = new Check()\n  return instance\n})()\n","import Contracts from '@api/contract'\n\nimport { WORKFLOW_ADDRESS } from '@api/config'\n\nclass Workflow extends Contracts {\n  address = WORKFLOW_ADDRESS\n\n  readAbi = [\n    {\n      inputs: [\n        {\n          internalType: 'uint8',\n          name: '_type',\n          type: 'uint8',\n        },\n      ],\n      name: 'getIntroduction',\n      outputs: [\n        {\n          internalType: 'string',\n          name: '',\n          type: 'string',\n        },\n      ],\n      stateMutability: 'view',\n      type: 'function',\n    },\n  ]\n\n  writeAbi = [\n    {\n      inputs: [\n        {\n          internalType: 'address',\n          name: '_to',\n          type: 'address',\n        },\n        {\n          internalType: 'string',\n          name: '_examId',\n          type: 'string',\n        },\n        {\n          internalType: 'uint8',\n          name: '_type',\n          type: 'uint8',\n        },\n        {\n          internalType: 'uint8',\n          name: '_level',\n          type: 'uint8',\n        },\n      ],\n      name: 'prepare',\n      outputs: [],\n      stateMutability: 'nonpayable',\n      type: 'function',\n    },\n    {\n      inputs: [\n        {\n          internalType: 'address',\n          name: '_to',\n          type: 'address',\n        },\n        {\n          internalType: 'string',\n          name: '_examId',\n          type: 'string',\n        },\n        {\n          internalType: 'uint8',\n          name: '_score',\n          type: 'uint8',\n        },\n        {\n          internalType: 'uint8[]',\n          name: '_answers',\n          type: 'uint8[]',\n        },\n        {\n          internalType: 'string',\n          name: '_picContent',\n          type: 'string',\n        },\n      ],\n      name: 'submit',\n      outputs: [],\n      stateMutability: 'nonpayable',\n      type: 'function',\n    },\n  ]\n\n  async prepare(_to: string, examId: string, type: number, level: number) {\n    return this.writeContract('prepare', _to, examId, type, level)\n  }\n\n  async getIntroduction(type: number) {\n    return this.readContract<string>('getIntroduction', type)\n  }\n\n  async submit(_to: string, examId: string, score: number, answers: number[], picContent: string) {\n    return this.writeContract('submit', _to, examId, score, answers, picContent)\n  }\n}\n\nlet instance\n\nexport default (() => {\n  if (instance) return instance\n  instance = new Workflow()\n  return instance\n})()\n","import axios from 'axios'\n\n// axios 实例\nconst instance = axios.create({\n  timeout: 15000,\n  responseType: 'json',\n})\n\n\n// 添加请求拦截器\ninstance.interceptors.request.use(\n  request => {\n    return request\n  },\n  error => {\n    return Promise.reject(error)\n  }\n)\n\n// 添加响应拦截器\ninstance.interceptors.response.use(\n  response => {\n    return Promise.resolve(response)\n  },\n  error => {\n    return Promise.reject(error)\n    \n  }\n)\n\nexport default instance","import instance from './intercept'\n\n// 请求头部信息\nexport type HeadersOptions = {\n  'app-lang'?: string,\n  'responseType'?: string\n  'Content-Type'?: string\n}\n\nexport type DataType = {\n  [key: string]:unknown\n}\n\nexport type Method = 'GET' | 'POST' | 'PUT' | 'DELETE'\nexport type ResponseType = 'arraybuffer' | 'blob' | 'document' | 'json' | 'text' | 'stream'\n\nexport interface AxiosRequest {\n  baseURL?: string\n  url?: string\n  data?: DataType\n  params?: unknown\n  method?: Method\n  headers?: HeadersOptions\n  timeout?: number\n  responseType?: ResponseType\n}\n\nclass Abstract {\n\n  protected baseURL = ''\n\n  private apiAxios<T>({ baseURL, headers, method, url, data, params, responseType, timeout }: AxiosRequest): Promise<T> {\n\n    return new Promise((resolve, reject) => {\n      instance({\n        baseURL: baseURL ? baseURL : this.baseURL,\n        headers,\n        method,\n        url,\n        params,\n        data,\n        responseType,\n        timeout,\n      }).then((response) => {\n        const res = response.data\n        return resolve(res)\n      }).catch((err) => {\n        const code = err?.data?.code || err?.code || -1\n        const message = err?.data?.message || err?.message || (url + '请求失败')\n        reject({ code, message, data: null })\n      })\n    })\n  }\n\n  /**\n   * GET类型的网络请求\n   */\n  protected getReq<T>({ baseURL, headers, url, data, params, responseType, timeout }: AxiosRequest): Promise<T> {\n    return this.apiAxios({ baseURL, headers, method: 'GET', url, data, params, responseType, timeout })\n  }\n\n  /**\n   * POST类型的网络请求\n   */\n  protected postReq<T>({ baseURL, headers, url, data, params, responseType, timeout }: AxiosRequest): Promise<T> {\n    return this.apiAxios({ baseURL, headers, method: 'POST', url, data, params, responseType, timeout })\n  }\n\n  /**\n   * PUT类型的网络请求\n   */\n  protected putReq<T>({ baseURL, headers, url, data, params, responseType, timeout }: AxiosRequest): Promise<T> {\n    return this.apiAxios({ baseURL, headers, method: 'PUT', url, data, params, responseType, timeout })\n  }\n\n  /**\n   * DELETE类型的网络请求\n   */\n  protected deleteReq<T>({ baseURL, headers, url, data, params, responseType, timeout }: AxiosRequest): Promise<T> {\n    return this.apiAxios({ baseURL, headers, method: 'DELETE', url, data, params, responseType, timeout })\n  }\n}\n\nexport default Abstract","import Abstract from '@api/axios/index'\nimport { API_HOST, IPFS_HOST } from '@api/config'\nimport type { ExamJson } from '@components/Exam/Take'\n\ninterface UploadImageResponse {\n  hash: string\n  status: number\n}\n\nclass Center extends Abstract {\n\n  baseURL = API_HOST\n\n  async exams(hashs: string[]) {\n\n    const exams: Promise<ExamJson>[] = []\n    hashs.forEach((hash) => {\n      const url = `/ipfs/${hash}`\n      exams.push(this.getReq<ExamJson>({ url }))\n    })\n\n    return Promise.all(exams)\n  }\n\n  async uploadImage(content: string) {\n    const url = `/storage/uploadImage`\n    const baseURL = IPFS_HOST\n    const data = { content }\n    return this.postReq<UploadImageResponse>({ url, baseURL, data })\n  }\n  // async uploadImage(file: File) {\n  //   const url = `/api/v0/add`\n  //   const baseURL = IPFS_HOST\n  //   const data = { file }\n  //   const headers = {'Content-Type': 'multipart/form-data;charset=UTF-8'}\n  //   return this.postReq<string>({ url, baseURL, data, headers })\n  // }\n\n  async imgBase64(hash: string) {\n    const url = `/ipfs/${hash}`\n    return await this.getReq<string>({ url })\n  }\n\n}\n\n// 单列模式返回对象\nlet instance\nexport default (() => {\n  if (instance) return instance\n  instance = new Center()\n  return instance\n})()","import React, { useState, useEffect } from 'react'\n\nimport langHook from '@hooks/localHook'\nimport { certificateLang, examLang } from '@langs/index'\n\nimport { CSTLEVEL } from '@constants/exam'\n\nimport { examApi, centerApi } from '@api/index'\n\nimport { truncateMiddle, dateTimeConversion } from '@utils/index'\n// import { catImg } from '@utils/ipfs'\n\nimport type { SourceDaoReward } from '@api/reward'\n\nimport './index.less'\n\nexport interface CertificateProps {\n  sbt?: string\n  data: SourceDaoReward\n}\n\nexport default ({ sbt, data }: CertificateProps): JSX.Element => {\n  \n  const local = langHook()\n\n  const [name, setName] = useState('')\n  const [picContent, setPicContent] = useState('')\n\n  useEffect(() => {\n    examApi.getTypeName(data.qtype).then((res) => {\n      setName(res)\n    })\n    // catImg(data.picContent).then((res) => {\n    //   setPicContent(res)\n    // })\n    centerApi.imgBase64(data.picContent).then((res) => {\n      setPicContent(res)\n    })\n  }, [])\n\n  return (\n    <div className=\"certificate\">\n      { (\n        <>\n          <img\n            className=\"certificate_left\"\n            src={sbt || picContent}\n          />\n          <div className=\"certificate_right\">\n            <div className=\"certificate_right_name\">\n              {name}（\n              {local(\n                examLang[\n                  (CSTLEVEL[data.qlevel] as unknown) as keyof typeof examLang\n                ]\n              )}\n              ）\n            </div>\n            <div className=\"certificate_right_text\"></div>\n            <div className=\"certificate_right_title\">\n              {local(certificateLang.basic)}\n            </div>\n            <div className=\"certificate_right_row certificate_right_basic\">\n              <div className=\"c_r_b_box\">\n                <div className=\"c_r_b_b_text c_r_b_b_title\">\n                  {local(certificateLang.iInstitution)}\n                </div>\n                <div className=\"c_r_b_b_text\">{data.org}</div>\n              </div>\n              <div className=\"c_r_b_box\">\n                <div className=\"c_r_b_b_text c_r_b_b_title\">\n                  {local(certificateLang.iTime)}\n                </div>\n                <div className=\"c_r_b_b_text\">\n                  {dateTimeConversion(data.time.toString())}\n                </div>\n              </div>\n              <div className=\"c_r_b_box\">\n                <div className=\"c_r_b_b_text c_r_b_b_title\">\n                  {local(certificateLang.eTime)}\n                </div>\n                <div className=\"c_r_b_b_text\">\n                  {dateTimeConversion(\n                    parseInt(data.time.toString()) +\n                      parseInt(data.qduration.toString())\n                  )}\n                </div>\n              </div>\n            </div>\n            <div className=\"certificate_right_title\">\n              {local(certificateLang.blockChainI)}\n            </div>\n            <div className=\"certificate_right_row certificate_right_clockChain\">\n              <div className=\"c_r_b_box\">\n                <div className=\"c_r_b_b_text c_r_b_b_title\">\n                  {local(certificateLang.blockChain)}\n                </div>\n                <div className=\"c_r_b_b_text\">{data.chain}</div>\n              </div>\n              <div className=\"c_r_b_box\">\n                <div className=\"c_r_b_b_text c_r_b_b_title\">\n                  {local(certificateLang.tStandard)}\n                </div>\n                <div className=\"c_r_b_b_text\">{data.protocol}</div>\n              </div>\n              <div className=\"c_r_b_box\">\n                <div className=\"c_r_b_b_text c_r_b_b_title\">\n                  {local(certificateLang.cAddress)}\n                </div>\n                <div className=\"c_r_b_b_text\">\n                  {truncateMiddle(data.contractAddr)}\n                </div>\n              </div>\n              <div className=\"c_r_b_box\">\n                <div className=\"c_r_b_b_text c_r_b_b_title\">\n                  {local(certificateLang.tokenID)}\n                </div>\n                <div className=\"c_r_b_b_text\">{data.id.toString()}</div>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  )\n}\n","import React from 'react'\n\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Divider,\n  List,\n  Typography,\n  useTheme,\n} from '@mui/material'\n\nimport langHook from '@hooks/localHook'\nimport { examLang, Lang } from '@langs/index'\n\nimport { ExamJson } from '../Take'\n\nimport { Palette } from '@utils/theme'\ninterface NavigateProps {\n  answers: number[]\n  setCurrentExam: (num: number) => void\n  leftText?: Lang\n  leftColor?: Palette\n  rightText?: Lang\n  rightColor?: Palette\n  exam?: Array<null | ExamJson>\n}\n\nexport default ({\n  answers,\n  setCurrentExam,\n  leftText = examLang.tbc,\n  leftColor = 'navLeft',\n  rightText = examLang.completed,\n  rightColor = 'navRight',\n  exam,\n}: NavigateProps): JSX.Element => {\n  const theme = useTheme()\n\n  const local = langHook()\n\n  return (\n    <Card sx={{ mb: 6 }}>\n      <CardContent>\n        <List\n          sx={{\n            display: 'flex',\n            flexDirection: 'row',\n            flexWrap: 'wrap',\n          }}\n        >\n          {answers.map((answer, index) => {\n            const btnColor = exam\n              ? exam[index]?.standard === answer\n                ? leftColor\n                : rightColor\n              : answer > 0\n                ? leftColor\n                : rightColor\n            return (\n              <Button\n                sx={{\n                  minWidth: 24,\n                  height: 24,\n                  p: 0,\n                  m: 0.55,\n                }}\n                color={btnColor}\n                key={index}\n                variant='contained'\n                onClick={() => setCurrentExam(index)}\n              >\n                {index + 1}\n              </Button>\n            )\n          })}\n        </List>\n        <Divider component=\"li\" sx={{ mb: 2 }} />\n        <Box\n          sx={{\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n          }}\n        >\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center',\n            }}\n          >\n            <Box\n              sx={{\n                width: 22,\n                height: 22,\n                m: 0.55,\n                backgroundColor: theme.palette[leftColor].main,\n                borderRadius: 1,\n              }}\n            ></Box>\n            <Typography>{local(leftText)}</Typography>\n          </Box>\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center',\n            }}\n          >\n            <Box\n              sx={{\n                width: 24,\n                height: 24,\n                m: 0.55,\n                backgroundColor: theme.palette[rightColor].main,\n                borderRadius: 1,\n              }}\n            ></Box>\n            <Typography>{local(rightText)}</Typography>\n          </Box>\n        </Box>\n      </CardContent>\n    </Card>\n  )\n}\n","import React, { ChangeEvent } from 'react'\n\nimport { FormControlLabel, Radio, RadioGroup, useTheme } from '@mui/material'\n\nimport { ExamJson } from '../index'\n\ninterface RadioProps {\n  index: number\n  exam: ExamJson\n  initVal?: number[]\n  handleChange?: (e: React.ChangeEvent<HTMLInputElement>, i: number) => void\n}\n\nexport default ({\n  exam,\n  index,\n  initVal,\n  handleChange,\n}: RadioProps): JSX.Element => {\n  const theme = useTheme()\n\n  const mainColor = theme.palette.primary.main\n  const rightColor = theme.palette.navLeft.main\n  const errorColor = theme.palette.navRight.main\n\n  const _handleChange = (\n    event: ChangeEvent<HTMLInputElement>,\n    index: number\n  ) => {\n    if (handleChange) handleChange(event, index)\n  }\n\n  return (\n    <RadioGroup\n      defaultValue={initVal ? initVal[index] + '' : '0'}\n      onChange={(e) => _handleChange(e, index)}\n    >\n      {exam.options.map((o, i) => {\n        const value = i + 1\n        const color = initVal\n          ? exam.standard === value\n            ? rightColor\n            : initVal[index] === value\n              ? errorColor\n              : mainColor\n          : mainColor\n        return (\n          <FormControlLabel\n            key={i}\n            value={value}\n            control={\n              initVal ? (\n                <Radio\n                  sx={{\n                    color: color,\n                    '&.Mui-checked': {\n                      color: color,\n                    },\n                  }}\n                  checked={initVal[index] === value}\n                />\n              ) : (\n                <Radio />\n              )\n            }\n            label={o}\n            sx={{\n              color,\n            }}\n          />\n        )\n      })}\n    </RadioGroup>\n  )\n}\n","import React, { useEffect, useRef } from 'react'\n\nimport {\n  Box,\n  Card,\n  CardContent,\n  Divider,\n  Skeleton,\n  Typography,\n} from '@mui/material'\n\nimport Radio from './Radio'\n\ninterface TakeProps {\n  exam: Array<null | ExamJson>\n  currentExam: number\n  handleChange?: (e: React.ChangeEvent<HTMLInputElement>, i: number) => void\n  initVal?: number[]\n}\n\nexport interface ExamJson {\n  type: string\n  level: 1 | 2 | 3\n  stem: string\n  options: string[]\n  standard: number\n}\n\nexport default ({\n  exam,\n  currentExam,\n  handleChange,\n  initVal,\n}: TakeProps): JSX.Element => {\n  const cardRef = useRef<HTMLDivElement>(null)\n  const boxRefs = useRef<{ [key: string]: HTMLDivElement }>({})\n\n  useEffect(() => {\n    const top = boxRefs.current[currentExam]?.offsetTop\n\n    if (top) cardRef.current?.scrollTo({ top: top - 213, behavior: 'smooth' })\n  }, [currentExam])\n\n  return (\n    <Card\n      ref={cardRef}\n      sx={{\n        height: 'calc(100vh - 230px)',\n        overflowY: 'auto',\n        '&::-webkit-scrollbar': {\n          width: 10,\n        },\n        '&::-webkit-scrollbar-track': {\n          backgroundColor: '#f5f7fa',\n        },\n        '&::-webkit-scrollbar-thumb': {\n          backgroundColor: '#e4e7ed',\n          borderRadius: 2,\n        },\n      }}\n    >\n      <CardContent>\n        {exam.map((item, index) => {\n          return (\n            <Box\n              ref={(r: HTMLDivElement) => {\n                boxRefs.current[index] = r\n              }}\n              key={index}\n              sx={{\n                boxSizing: 'border-box',\n                p: 3,\n              }}\n            >\n              {item ? (\n                <Box>\n                  <Typography\n                    sx={{\n                      mb: 4,\n                    }}\n                  >\n                    {index + 1}. {item.stem}\n                  </Typography>\n                  <Radio\n                    exam={item}\n                    index={index}\n                    handleChange={handleChange}\n                    initVal={initVal}\n                  />\n                </Box>\n              ) : (\n                <Box>\n                  <Skeleton\n                    variant=\"text\"\n                    animation=\"wave\"\n                    width={600}\n                    height={26}\n                    sx={{ mb: 4 }}\n                  />\n                  <Skeleton\n                    variant=\"text\"\n                    animation=\"wave\"\n                    width={300}\n                    height={26}\n                    sx={{ mb: 1.5 }}\n                  />\n                  <Skeleton\n                    variant=\"text\"\n                    animation=\"wave\"\n                    width={300}\n                    height={26}\n                    sx={{ mb: 1.5 }}\n                  />\n                  <Skeleton\n                    variant=\"text\"\n                    animation=\"wave\"\n                    width={300}\n                    height={26}\n                    sx={{ mb: 1.5 }}\n                  />\n                  <Skeleton\n                    variant=\"text\"\n                    animation=\"wave\"\n                    width={300}\n                    height={26}\n                    sx={{ mb: 1.5 }}\n                  />\n                </Box>\n              )}\n              {index < exam.length - 1 && <Divider sx={{ mt: 4 }} />}\n            </Box>\n          )\n        })}\n      </CardContent>\n    </Card>\n  )\n}\n","import React from 'react'\n\nimport { utils } from 'ethers'\n\nimport { Box, Card, CardContent, Typography } from '@mui/material'\n\nimport langHook from '@hooks/localHook'\nimport { examLang, introduceLang, profileLang } from '@langs/index'\n\nimport { CSTLEVEL } from '@constants/exam'\n\nexport interface TitleProps {\n  name: string\n  level: keyof typeof CSTLEVEL\n  duration?: number\n  total?: string\n  time?: string\n  lowCost?: number\n  costUnit?: string\n}\n\nexport default ({\n  name,\n  duration,\n  total,\n  level,\n  time,\n  lowCost,\n  costUnit,\n}: TitleProps): JSX.Element => {\n  const local = langHook()\n\n  const examSubtitle = (\n    <Box>\n      <Typography component=\"span\" sx={{ mr: 4 }}>\n        {local(introduceLang.duration)}\n      </Typography>\n      <Typography component=\"span\" sx={{ mr: 12 }}>\n        {duration + local(introduceLang.mins)}\n      </Typography>\n      <Typography component=\"span\" sx={{ mr: 4 }}>\n        {local(introduceLang.noq)}\n      </Typography>\n      <Typography component=\"span\">\n        {total + local(introduceLang.question)}\n      </Typography>\n    </Box>\n  )\n\n  const examDetailsSubtitle = (\n    <Box>\n      <Typography component=\"span\" sx={{ mr: 4 }}>\n        {local(profileLang.submittedTime)}\n      </Typography>\n      <Typography component=\"span\" sx={{ mr: 12 }}>\n        {time}\n      </Typography>\n      <Typography component=\"span\" sx={{ mr: 4 }}>\n        {local(profileLang.fee)}\n      </Typography>\n      {lowCost && (\n        <Typography component=\"span\">\n          {utils.formatEther(lowCost!) + costUnit!}\n        </Typography>\n      )}\n    </Box>\n  )\n\n  return (\n    <Card sx={{ mb: 6 }}>\n      <CardContent>\n        <Box\n          sx={{\n            display: 'flex',\n            mb: 3.6,\n            alignItems: 'center',\n          }}\n        >\n          <Typography>{name}</Typography>\n          <Box\n            sx={{\n              ml: 2,\n              p: 0.5,\n              pl: 1.5,\n              pr: 1.5,\n              backgroundColor: '#ccc',\n              fontSize: 12,\n            }}\n          >\n            {local(\n              examLang[(CSTLEVEL[level] as unknown) as keyof typeof examLang]\n            )}\n          </Box>\n        </Box>\n        {duration && total ? examSubtitle : examDetailsSubtitle}\n      </CardContent>\n    </Card>\n  )\n}\n","export enum LEVEL {\n  'primary' = '1',\n  'intermediate' = '2',\n  'advanced' = '3',\n}\n\nexport const CSTLEVEL = {\n  [LEVEL.primary]: 'primary',\n  [LEVEL.intermediate]: 'intermediate',\n  [LEVEL.advanced]: 'advanced',\n}\n\nexport const CSTSCORELEVEL = {\n  '1': 2,\n  '2': 3,\n  '3': 5,\n}\n"],"names":["instance","Contracts","currentWallet","store","wallet","getProvider","provider","signer","getSigner","_writeContract","ethers","address","writeAbi","_readContract","readAbi","api","this","Error","arg","EXAM_ADDRESS","REWARD_ADDRESS","CHECK_ADDRESS","WORKFLOW_ADDRESS","API_HOST","inputs","internalType","name","type","outputs","stateMutability","components","examId","level","writeContract","readContract","answers","tokenId","_to","score","picContent","axios","timeout","responseType","interceptors","request","use","error","Promise","reject","response","resolve","Abstract","baseURL","headers","method","url","data","params","then","res","catch","err","code","message","apiAxios","i","hashs","exams","forEach","hash","push","getReq","all","content","postReq","sbt","local","langHook","useState","setName","setPicContent","useEffect","examApi","qtype","centerApi","className","src","examLang","CSTLEVEL","qlevel","certificateLang","org","dateTimeConversion","time","toString","parseInt","qduration","chain","protocol","truncateMiddle","contractAddr","id","setCurrentExam","leftText","leftColor","rightText","rightColor","exam","theme","useTheme","sx","mb","display","flexDirection","flexWrap","map","answer","index","btnColor","standard","minWidth","height","p","m","color","key","variant","onClick","component","width","justifyContent","alignItems","backgroundColor","palette","main","borderRadius","initVal","handleChange","mainColor","primary","navLeft","errorColor","navRight","RadioGroup","defaultValue","onChange","e","event","_handleChange","options","o","value","FormControlLabel","control","Radio","checked","label","currentExam","cardRef","useRef","boxRefs","top","current","offsetTop","scrollTo","behavior","Card","ref","overflowY","CardContent","item","Box","r","boxSizing","Typography","stem","Skeleton","animation","length","Divider","mt","duration","total","lowCost","costUnit","examSubtitle","mr","introduceLang","examDetailsSubtitle","profileLang","utils","ml","pl","pr","fontSize","LEVEL","intermediate","advanced","CSTSCORELEVEL"],"sourceRoot":""}